----------------------- Aula 4 ----------------------
----------------- Exercicio FUNÇÕES -----------------
CREATE OR REPLACE FUNCTION FC_BUSCA_SAL
   (v_cod IN system.pro_func.cod_func%TYPE)
    RETURN NUMBER
 IS v_salario system.pro_func.vl_salario%TYPE := 0;
 BEGIN
   SELECT vl_salario
   INTO   vl_salario
   FROM   system.pro_func
  WHERE cod_func = v_cod;
   RETURN (v_salario);
   
 END FC_BUSCA_SAL;
** Para acessar essa Função, vai na pasta da função e clica em Edit para
poder ver quais possiveis erros pode ter no codigo**
/////////////////////////////////////////
------- SQL WINDOW ------
SELECT FC_BUSCA_SAL(2)
FROM   dual
/////////////////////////////////////////
------- Test Window -----
-- Created on 27/09/2020 by ORACLE 
declare 
  -- Local variables here
  i integer;
  v_sal pro_func.vl_salario%TYPE;
  
begin
  -- Test statements here
  
  i     := fc_busca_sal(2);
  v_sal := fc_busca_sal(2);
  dbms_output.put_line('Valor Inteiro: ' || i);
  dbms_output.put_line('Valor Real: ' || v_sal);  

end;
///////////////////////////////////////
CREATE OR REPLACE FUNCTION FC_BUSCA_SAL
   (v_cod IN system.pro_func.cod_func%TYPE)
    RETURN NUMBER
 IS v_salario system.pro_func.vl_salario%TYPE := 0;
 BEGIN
   SELECT vl_salario
   INTO   v_salario
   FROM   system.pro_func
  WHERE cod_func = v_cod;
   RETURN (v_salario);

 END FC_BUSCA_SAL;

///////////////////////////////////////
CREATE OR REPLACE FUNCTION FC_BUSCA_FUNC
  (v_cod IN system.pro_func.cod_func%TYPE)
    RETURN VARCHAR2
 IS v_func system.pro_func.nom_func%TYPE := 0;
 BEGIN
   SELECT nom_func
   INTO   v_func
   FROM   system.pro_func
  WHERE cod_func = v_cod;
   RETURN (v_func);

 END FC_BUSCA_FUNC;

--------------- Exercicio fazer Busca mais de um funcionario ---------------
-- Created on 27/09/2020 by ORACLE 
declare 
  -- Local variables here
  
  v_sal1    pro_func.vl_salario%TYPE;
  V_func1   pro_func.nom_func%TYPE;
  
  v_sal2    pro_func.vl_salario%TYPE;
  V_func2   pro_func.nom_func%TYPE;
  
  v_busca  integer := 0;
begin
  -- Test statements here
  
    v_sal1  := fc_busca_sal(2);
    v_func1 := fc_busca_func(2);
    dbms_output.put_line('Nome: '               ||
                          RPAD(v_func1,20,' ')  ||
                          'Salario Real: '      || 
                          RPAD(v_sal1,20,' ')
                         );  
    
    SELECT fc_busca_func(3),
           fc_busca_sal(3)
    INTO   v_func2,
           v_sal2
    FROM   dual;
    --where  v_busca = 3;
    
    
    dbms_output.put_line('Nome: '               ||
                          RPAD(v_func2,20,' ')  ||
                          'Salario Real: '      || 
                          RPAD(v_sal2,20,' ')
                         );  


end;


--------------------- PROCEDIMENTOS --------------------
----------- SQL WINDOW -----------------
*** Usando Procedimentos ***

-- Created on 27/09/2020 by ORACLE 
declare 
  -- Local variables here
  
  v_nome    system.pro_func.nom_func%TYPE;
  v_sal     system.pro_func.vl_salario%TYPE;
  v_sal_new system.pro_func.vl_salario%TYPE;
  
begin
  -- Test statements here
  
  SELECT fc_busca_func(2),
         fc_busca_sal(2)
  INTO   v_nome,
         v_sal
  FROM   dual;
  
  pr_salario(2);
  
  v_sal_new := fc_busca_sal(2);
  
  dbms_output.put_line('Nome: '                ||
                        RPAD(v_nome,20,' ')    ||
                       'Salario Real: '        || 
                        RPAD(v_sal,15,' ')     ||
                       'Reajuste: '            ||
                        RPAD(v_sal_new,20,' ') 
                       ); 
         
  
end;

-------------- Procedimento com Prametro de saida ------------

CREATE OR REPLACE PROCEDURE PR_SALARIO_2
   (p_id IN system.pro_func.cod_func%TYPE,
    p_saida OUT NUMBER
   )
    
   IS

   BEGIN
     UPDATE system.pro_func
     SET    vl_salario = vl_salario * 1.1
     WHERE  cod_func = p_id;
     
     SELECT fc.vl_salario
     INTO   p_saida
     FROM   pro_func fc
     where fc.cod_func = p_id;

   END PR_SALARIO_2;

-------------- Procedimento com Paramentro de Saida + mensagem de ERRO -----------
CREATE OR REPLACE PROCEDURE PR_SALARIO_2
   (p_id IN system.pro_func.cod_func%TYPE,
    p_saida OUT NUMBER,
    p_mensagem OUT VARCHAR2
   )
    
   IS
   v_update_ok number;
   BEGIN
     begin
       UPDATE system.pro_func
       SET    vl_salario = vl_salario * 1.1
       WHERE  cod_func = p_id;
       v_update_ok := SQL%ROWCOUNT;
     EXCEPTION
       WHEN others THEN
         p_mensagem := 'Erro ao atualizar Salário ' || SQLERRM;
     end;
     
     begin   
       SELECT fc.vl_salario
       INTO   p_saida
       FROM   pro_func fc
       where fc.cod_func = p_id;
     EXCEPTION 
       WHEN others THEN
         p_mensagem := ' Funcionario inexistente ' || SQLERRM;
     end;
     
     IF v_update_ok > 1 THEN
       commit;
     ELSE
       rollback;
       p_mensagem := (p_mensagem || ' Atualização Recusada!  ');
     END IF;
     
   END PR_SALARIO_2;

---------------------- Packge e Package Body ----------------------
----------------- Criando Package SPEC -----------------------
CREATE OR REPLACE PACKAGE PRG_FUNCIONARIO

 IS -- FAZ EXECUTAR O CÓDIGO 

 PROCEDURE PRG_DADOS_FUNC
   (
    P_CODIGO     IN NUMBER,
    P_NOME_DPTO  OUT VARCHAR2,
    P_CIDADE     OUT VARCHAR2
   );
 
 END PRG_FUNCIONARIO;
-------------- Criando Package BODY ---------------------
CREATE OR REPLACE PACKAGE BODY PRG_FUNCIONARIO

 IS -- FAZ EXECUTAR O CÓDIGO 

 PROCEDURE PRG_DADOS_FUNC
   (
    P_CODIGO     IN NUMBER,
    P_NOME_DPTO  OUT VARCHAR2,
    P_CIDADE     OUT VARCHAR2
   )
   
   IS
   
   BEGIN
     NULL;
   END;
 
 END PRG_FUNCIONARIO;

------------- ↓↓ PACKAGE BODY ↓↓ ----------------
CREATE OR REPLACE PACKAGE BODY PRG_FUNCIONARIO

 IS -- FAZ EXECUTAR O CÓDIGO 

 PROCEDURE PRG_DADOS_FUNC
   (
    P_CODIGO     IN NUMBER,
    P_NOME_DPTO  OUT VARCHAR2,
    P_CIDADE     OUT VARCHAR2
   )
   
   IS
   
   BEGIN
     SELECT D.NM_DPTO,
            C.NMCIDADE
     INTO   P_NOME_DPTO,
            P_CIDADE
     FROM   PRO_FUNC F
     
     JOIN PRO_DEPTO D ON F.COD_DPTO  = D.COD_DPTO
     JOIN PRO_CIDADE C ON F.CDCIDADE = C.CDCIDADE
          
     WHERE F.COD_FUNC = P_CODIGO;  
   
   END PRG_DADOS_FUNC;
 
 END PRG_FUNCIONARIO;

---------------- Incremento de Package BODY 1º -------------------
CREATE OR REPLACE PACKAGE BODY PRG_FUNCIONARIO

 IS -- FAZ EXECUTAR O CÓDIGO 

 PROCEDURE PRG_DADOS_FUNC
   (
    P_CODIGO      IN NUMBER,
    P_NOME_DPTO   OUT VARCHAR2,
    P_CIDADE      OUT VARCHAR2,
    P_FUNC        OUT VARCHAR2
   )
   
   IS
   
   BEGIN
     SELECT D.NM_DPTO,
            C.NMCIDADE,
            F.nom_func
     INTO   P_NOME_DPTO,
            P_CIDADE,
            P_FUNC
     FROM   PRO_FUNC F
     
     JOIN PRO_DEPTO D ON F.COD_DPTO  = D.COD_DPTO
     JOIN PRO_CIDADE C ON F.CDCIDADE = C.CDCIDADE
          
     WHERE F.COD_FUNC = P_CODIGO;  
   
   END PRG_DADOS_FUNC;
 
 END PRG_FUNCIONARIO;

---------------- Incremento de Package SEC 1º -------------------
CREATE OR REPLACE PACKAGE PRG_FUNCIONARIO

 IS -- FAZ EXECUTAR O CÓDIGO 

 PROCEDURE PRG_DADOS_FUNC
   (
    P_CODIGO     IN NUMBER,
    P_NOME_DPTO  OUT VARCHAR2,
    P_CIDADE     OUT VARCHAR2,
    P_FUNC        OUT VARCHAR2
   );
   
   FUNCTION FC_ESTADO
     (
      P_CODIGO_FUNC  IN NUMBER
     )
    RETURN VARCHAR2;
    
 END PRG_FUNCIONARIO;

---------------- Incremento de Package BODY 2º -------------------
CREATE OR REPLACE PACKAGE BODY PRG_FUNCIONARIO

 IS -- FAZ EXECUTAR O CÓDIGO 

 PROCEDURE PRG_DADOS_FUNC
   (
    P_CODIGO      IN NUMBER,
    P_NOME_DPTO   OUT VARCHAR2,
    P_CIDADE      OUT VARCHAR2,
    P_FUNC        OUT VARCHAR2
   )
   
   IS
   
   BEGIN
     SELECT D.NM_DPTO,
            C.NMCIDADE,
            F.nom_func
     INTO   P_NOME_DPTO,
            P_CIDADE,
            P_FUNC
     FROM   PRO_FUNC F
     
     JOIN PRO_DEPTO D ON F.COD_DPTO  = D.COD_DPTO
     JOIN PRO_CIDADE C ON F.CDCIDADE = C.CDCIDADE
          
     WHERE F.COD_FUNC = P_CODIGO;  
   
   END PRG_DADOS_FUNC;
   
   FUNCTION FC_ESTADO
     (
      P_CODIGO_FUNC  IN NUMBER
     )
    RETURN VARCHAR2
    
    IS
       V_NOME VARCHAR2(50);
    BEGIN
      SELECT E.NMESTADO
      INTO   V_NOME
      FROM   PRO_FUNC F
      
      JOIN PRO_CIDADE C ON F.CDCIDADE = C.CDCIDADE
      JOIN PRO_ESTA   E ON C.CDESTA   = E.CDESTA
    
    WHERE F.COD_FUNC = P_CODIGO_FUNC;
    
    RETURN(V_NOME);
    END;
 
 END PRG_FUNCIONARIO;

------------- Teste da pcocedure em Teste Window -------------
-- Created on 27/09/2020 by ORACLE 
declare 
  -- Local variables here
  
  v_dpto     system.pro_depto.nm_dpto   % TYPE;
  v_cidade   system.pro_cidade.nmcidade % TYPE;
  v_nome     system.pro_func.nom_func   % TYPE;
  
begin
  -- Test statements here
  
  PRG_FUNCIONARIO.PRG_DADOS_FUNC(5,v_dpto,v_cidade,v_nome);
  
  dbms_output.put_line(RPAD('Departamento: ',15,' ') || v_dpto   );
  dbms_output.put_line(RPAD('Cidade: ',15,' ')       || v_cidade );
  dbms_output.put_line(RPAD('Nome: ',15,' ')         || v_nome   );
  
end;

-------------- Teste da Procedure com Função em Teste Window ----------

-- Created on 27/09/2020 by ORACLE 
declare 
  -- Local variables here
  
  v_dpto     system.pro_depto.nm_dpto   % TYPE;
  v_cidade   system.pro_cidade.nmcidade % TYPE;
  v_nome     system.pro_func.nom_func   % TYPE;
  v_estado   system.pro_esta.nmestado   % TYPE;
begin
  -- Test statements here
  
  PRG_FUNCIONARIO.PRG_DADOS_FUNC(5,v_dpto,v_cidade,v_nome);
  
  v_estado := PRG_FUNCIONARIO.FC_ESTADO(5);
  
  dbms_output.put_line(RPAD('Departamento: ',15,' ') || v_dpto   );
  dbms_output.put_line(RPAD('Cidade: ',15,' ')       || v_cidade );
  dbms_output.put_line(RPAD('Nome: ',15,' ')         || v_nome   );
  dbms_output.put_line(RPAD('Estado: ',15,' ')       || v_estado );
end;

------------------- VETOR - vARRAY ---------------------
------------------- Exemplo ----------------------------
-- Created on 27/09/2020 by ORACLE 
declare 
  -- DEFINIÇÃO
  TYPE t_cidade IS RECORD(cod   NUMBER(10),
                          nome  VARCHAR2(50));
  
  -- DECLARAÇÃO
  x    t_cidade;
  

begin
  -- Test statements here
  
  x.cod  := 1;
  x.nome := 'Teste';
  
end;

---------------- Lista com vARRAY -----------

-- Created on 27/09/2020 by ORACLE 
declare 
  -- DEFINIÇÃO
  TYPE t_cidade IS RECORD (cod   NUMBER(10),
                           nome  VARCHAR2(50));
  TYPE t_lista  IS VARRAY(3) OF NUMBER(5);
  -- DECLARAÇÃO
  x    t_cidade;
  v    t_lista;

begin
  -- Test statements here
  
  x.cod  := 1;
  x.nome := 'Teste';
  
  v := t_lista(10,30,20);
  
  FOR T IN 1..3
    LOOP
      dbms_output.put_line('Posição ' || T || 'º: ' || v(T));
    END LOOP;
  
end;

------------------- Record + Tabela + Lista -----------------------

-- Created on 27/09/2020 by ORACLE 
declare 
  -- DEFINIÇÃO
  TYPE t_cidade IS RECORD (cidade  VARCHAR2(50),
                           ESTADO  VARCHAR2(50)
                          );
  
  TYPE t_tabela IS TABLE OF t_cidade INDEX BY BINARY_INTEGER;
                           
  TYPE t_lista  IS VARRAY(3) OF NUMBER(5);
  
  -- DECLARAÇÃO
  x    t_cidade;
  v    t_lista;
  TB   t_tabela;
  
  CURSOR cidade IS
    SELECT C.CDCIDADE,
           C.NMCIDADE,
           E.NMESTADO
    FROM   PRO_CIDADE C
    
    JOIN PRO_ESTA E ON C.CDESTA = E.CDESTA;
    
   
begin
  -- Test statements here
  
  --x.cod  := 1;
  --x.nome := 'Teste';
  
  v := t_lista(10,30,20);
  
  FOR T IN 1..3
    LOOP
      dbms_output.put_line('Posição ' || T || 'º: ' || v(T));
    END LOOP;
  
  FOR C IN cidade
    LOOP
      TB(C.CDCIDADE).CIDADE   := C.NMCIDADE;
      TB(C.CDCIDADE).ESTADO := C.NMESTADO;
    END LOOP;
    
    dbms_output.put_line(TB(1).CIDADE);
    dbms_output.put_line(TB(1).ESTADO);
    
    dbms_output.put_line(TB(3).CIDADE);
    dbms_output.put_line(TB(3).ESTADO);
    
end;
































