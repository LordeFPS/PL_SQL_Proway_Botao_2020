----------------------- Trigger -----------------------
Exemplo
----------------------- Tela de SQL Window ------------------
Criando apenas a "casca" do programa no SQL Window com a palavra NULL

CREATE OR REPLACE TRIGGER TG_PRO_PAIS_INS
BEFORE INSERT
  ON PRO_PAIS
FOR EACH ROW -- PARA CADA LINHA CRIADA

BEGIN
  -- :NEW.DTCADAST := SYSDATE;
  -- :NEW.USUCADAS := USER;
  NULL; -- server só para "criar" a trigger 
END;

---------------------- Vai na pasta onde ta a trigger ----------------------
Faz um browser da tabela e procura pela pasta Trigger para poder abrir 
pela pasta e ter a estrutura, logo fazendo as restrições.
Quando vc achar a pasta da trigger clica em Edit.

CREATE OR REPLACE TRIGGER TG_PRO_PAIS_INS
BEFORE INSERT
  ON PRO_PAIS
FOR EACH ROW -- PARA CADA LINHA CRIADA

BEGIN
  :NEW.DTCADAST := SYSDATE;
  :NEW.USUCADAS := USER;
  :NEW.DTALTERA := SYSDATE;
  :NEW.USUALTER := USER;
  :NEW.CDPAIS   := PRO_PAIS_SEQ.NEXTVAL;
  
END;

-------------------- CRIANDO SEQUENCE --------------------------
CREATE SEQUENCE PRO_PAIS_SEQ

MAXVALUE 9999999999
MINVALUE 4
INCREMENT BY 1
NOCACHE
NOCYCLE

-------------------- Fazendo teste da Trigger ------------------
Trigger preenche campos da tabela na qual o Banco preenche automaticamente,
ou seja, campos que o usuario n precisa cadastrar.
 
-- Created on 20/09/2020 by ORACLE 
declare 
  -- Local variables here
  i integer;
begin
  -- Test statements here
  BEGIN
    INSERT INTO PRO_PAIS
      (
       PRO_PAIS.SGPAIS,
       PRO_PAIS.NMPAIS
      )
      VALUES
         (
          'PRG',
          'PARAGUAI'
         );
    EXCEPTION
      WHEN OTHERS THEN
        dbms_output.put_line('Não foi possível inserir '|| SQLERRM);
  END;
end;

---------------- Trigger com AFTER 1º SQL WINDOW -------------------------

CREATE OR REPLACE TRIGGER TG_PRO_PAIS_AFT
AFTER INSERT
  ON PRO_PAIS
FOR EACH ROW -- PARA CADA LINHA CRIADA

BEGIN
  
END;

-------------- CRIANDO TABELA DE EXEMPLO ------------------------

CREATE TABLE PRO_PAIS_SUL
(
 NOME_PAIS   VARCHAR2(50),
 SIGLA_PAIS  VARCHAR2(10)
 
)


-------------- Trigger com AFTER 2º Program Window ------------------------

CREATE OR REPLACE TRIGGER TG_PRO_PAIS_AFT
AFTER INSERT
  ON PRO_PAIS
FOR EACH ROW -- PARA CADA LINHA CRIADA

BEGIN
  INSERT INTO PRO_PAIS_SUL
    (
     PRO_PAIS_SUL.NOME_PAIS,
     PRO_PAIS_SUL.SIGLA_PAIS
    )
  VALUES
    (
     :OLD.NMPAIS,
     :OLD.SGPAIS
    ); 
END;

--------------- Fazendo o teste com as 2 TRIGGERS --------------------------
Usando condições tbm para commit caso ele insira ou rollback 
quando der algum erro.
Quando o banco n tem unigue key ou PK "certos" é preciso fazer td
pela programação (PL/SQL)

-- Created on 20/09/2020 by ORACLE 
declare 
  -- Local variables here
  V_NOME_PAIS            VARCHAR2(50) := 'CHINA';
  V_SIGLA_PAIS           VARCHAR2(10) := 'CHN';
  V_QTD_EXISTE_PAIS      NUMBER;
  
  V_QTD_PAIS_INICIO      NUMBER;
  V_QTD_PAIS_FINAL       NUMBER;
  
  V_QTD_PAIS_SUL_INICIO NUMBER;
  V_QTD_PAIS_SUL_FINAL   NUMBER;
  
begin
  -- Test statements here
  
  BEGIN
    SELECT COUNT (*)
    INTO   V_QTD_EXISTE_PAIS
    FROM   PRO_PAIS P
    WHERE  P.NMPAIS = V_NOME_PAIS;
  EXCEPTION
    WHEN OTHERS THEN
      dbms_output.put_line('Erro ao buscar o país ' || SQLERRM);
  END;
  
  IF V_QTD_EXISTE_PAIS = 0 THEN
    BEGIN
      SELECT COUNT (*)
      INTO V_QTD_PAIS_INICIO
      FROM PRO_PAIS;
    EXCEPTION
    WHEN OTHERS THEN
      dbms_output.put_line('Erro ao Buscar quantidade inicial ' || SQLERRM);
    END;
    
    BEGIN
      SELECT COUNT (*)
      INTO   V_QTD_PAIS_SUL_INICIO
      FROM   PRO_PAIS_SUL;
    EXCEPTION
      WHEN OTHERS THEN
        dbms_output.put_line('Erro ao Buscar quantidade inicial ' || SQLERRM);
    END;

    BEGIN
      INSERT INTO PRO_PAIS
        (
         PRO_PAIS.SGPAIS,
         PRO_PAIS.NMPAIS
        )
        VALUES
           (
            V_SIGLA_PAIS,
            V_NOME_PAIS
           );
      EXCEPTION
        WHEN OTHERS THEN
          dbms_output.put_line('Não foi possível inserir '|| SQLERRM);
    END;
      
    BEGIN
      SELECT COUNT (*)
      INTO   V_QTD_PAIS_FINAL
      FROM   PRO_PAIS;
    EXCEPTION
      WHEN OTHERS THEN
        dbms_output.put_line('Erro ao Buscar quantidade final ' || SQLERRM);
    END;
    
    BEGIN
      SELECT COUNT (*)
        INTO V_QTD_PAIS_SUL_FINAL
        FROM PRO_PAIS_SUL;
    EXCEPTION
      WHEN OTHERS THEN
        dbms_output.put_line('Erro ao Buscar quantidade final ' || SQLERRM);
    END;
    
    IF (V_QTD_PAIS_INICIO < V_QTD_PAIS_FINAL)
       AND
       (V_QTD_PAIS_SUL_INICIO < V_QTD_PAIS_SUL_FINAL)   
    THEN
      COMMIT;
    ELSE
      ROLLBACK;
    END IF;
  ELSE
    dbms_output.put_line('Pais ja existe ' || SQLERRM);
  END IF;
end;

----------------- Trigger para UPDATE 1º --------------------

CREATE OR REPLACE TRIGGER TG_PRO_PAIS_UPDATE
BEFORE UPDATE
  ON PRO_PAIS
FOR EACH ROW

BEGIN
  NULL;
END;

-------------- Trigger para UPDATE 2º ------------------------

CREATE OR REPLACE TRIGGER TG_PRO_PAIS_UPDATE
BEFORE UPDATE
  ON PRO_PAIS
FOR EACH ROW

BEGIN
  IF :NEW.SGPAIS <> :OLD.SGPAIS THEN
    INSERT INTO PRO_LOG
      (
       PRO_LOG.NMTABELA,
       PRO_LOG.NMCAMPO,
       PRO_LOG.VAL_ANTIGO,
       PRO_LOG.VAL_NOVO,
       PRO_LOG.DTALTERA,
       PRO_LOG.USUALTERA
      )
     VALUES
      (
       'PRO_PAIS',
       'SGPAIS',
       :OLD.SGPAIS,
       :NEW.SGPAIS,
       SYSDATE,
       USER
      );
  END IF;
END;

------------ Trigger para UPDATE 3º --------------------------

-- Created on 20/09/2020 by ORACLE 
declare 
  -- Local variables here
  V_NOME_PAIS            VARCHAR2(50) := 'URUGUAI';
  V_SIGLA_PAIS           VARCHAR2(10) := 'URU';
  V_QTD_EXISTE_PAIS      NUMBER;
  
  V_QTD_PAIS_INICIO      NUMBER;
  V_QTD_PAIS_FINAL       NUMBER;
  
  V_QTD_PAIS_SUL_INICIO NUMBER;
  V_QTD_PAIS_SUL_FINAL   NUMBER;
  
begin
  -- Test statements here
  
  BEGIN
    SELECT COUNT (*)
    INTO   V_QTD_EXISTE_PAIS
    FROM   PRO_PAIS P
    WHERE  P.NMPAIS = V_NOME_PAIS;
  EXCEPTION
    WHEN OTHERS THEN
      dbms_output.put_line('Erro ao buscar o país ' || SQLERRM);
  END;
  
  IF V_QTD_EXISTE_PAIS = 0 THEN
    BEGIN
      SELECT COUNT (*)
      INTO V_QTD_PAIS_INICIO
      FROM PRO_PAIS;
    EXCEPTION
    WHEN OTHERS THEN
      dbms_output.put_line('Erro ao Buscar quantidade inicial ' || SQLERRM);
    END;
    
    BEGIN
      SELECT COUNT (*)
      INTO   V_QTD_PAIS_SUL_INICIO
      FROM   PRO_PAIS_SUL;
    EXCEPTION
      WHEN OTHERS THEN
        dbms_output.put_line('Erro ao Buscar quantidade inicial ' || SQLERRM);
    END;

    BEGIN
      INSERT INTO PRO_PAIS
        (
         PRO_PAIS.SGPAIS,
         PRO_PAIS.NMPAIS
        )
        VALUES
           (
            V_SIGLA_PAIS,
            V_NOME_PAIS
           );
      EXCEPTION
        WHEN OTHERS THEN
          dbms_output.put_line('Não foi possível inserir '|| SQLERRM);
    END;
      
    BEGIN
      SELECT COUNT (*)
      INTO   V_QTD_PAIS_FINAL
      FROM   PRO_PAIS;
    EXCEPTION
      WHEN OTHERS THEN
        dbms_output.put_line('Erro ao Buscar quantidade final ' || SQLERRM);
    END;
    
    BEGIN
      SELECT COUNT (*)
        INTO V_QTD_PAIS_SUL_FINAL
        FROM PRO_PAIS_SUL;
    EXCEPTION
      WHEN OTHERS THEN
        dbms_output.put_line('Erro ao Buscar quantidade final ' || SQLERRM);
    END;
    
    IF (V_QTD_PAIS_INICIO < V_QTD_PAIS_FINAL)
       AND
       (V_QTD_PAIS_SUL_INICIO < V_QTD_PAIS_SUL_FINAL)   
    THEN
      COMMIT;
    ELSE
      ROLLBACK;
    END IF;
  ELSE
    UPDATE PRO_PAIS P
    SET    P.SGPAIS = V_SIGLA_PAIS
    WHERE  P.NMPAIS = V_NOME_PAIS;
    IF SQL%ROWCOUNT > 0 THEN
      dbms_output.put_line('Sigla Alterada ' || SQLERRM);
      COMMIT;
    ELSE
      dbms_output.put_line('RollBack executado ' || SQLERRM);
      ROLLBACK;
    END IF;
    dbms_output.put_line('Pais ja existe ' || SQLERRM);
    
  END IF;
end;

----------------- Exercicio TRIGGER ------------------------------
__________ CRIANDO TABELA __________
CREATE TABLE PRO_DADOS
(
 COD_DADOS    NUMBER NOT NULL,
 FIST_NAME    VARCHAR2(20),
 LAST_NAME    VARCHAR(25)
)
_________ CRIANDO SEQUENCE _________
CREATE SEQUENCE SEQUENCE_TESTE

MINVALUE 1
MAXVALUE 999999999
START WITH 1
INCREMENT BY 1

_________ TRIGGER _________
CREATE OR REPLACE TRIGGER TG_PRO_DADOS_INS
BEFORE INSERT
  ON PRO_DADOS
FOR EACH ROW -- PARA CADA LINHA CRIADA

BEGIN
 :NEW.ID := SEQUENCE_TESTE.NEXTVAL;
END;

_________ INSERINDO DADOS _________
INSERT INTO PRO_DADOS
(
 FIRST_NAME,
 LAST_NAME
)
VALUES
(
 'JOAO',
 'SANTOS'
)

INSERT INTO PRO_DADOS
(
 FIRST_NAME,
 LAST_NAME
)
VALUES
(
 'YASMIN',
 'SILVA'
)


--------------------- CURSOR com FETCH ---------------------------

-- Created on 20/09/2020 by ORACLE 
declare 
  -- Local variables here
  CURSOR FUNC IS
    SELECT f.cod_func,
           f.nom_func,
           f.vl_salario               
    FROM PRO_FUNC F
    WHERE f.vl_salario > 2000;
  
  v_teste    pro_func%ROWTYPE;
begin
  -- Test statements here
  OPEN FUNC;
  LOOP
    FETCH FUNC
      INTO v_teste.cod_func,
           v_teste.nom_func,
           v_teste.vl_salario;
   EXIT 
    WHEN FUNC%NOTFOUND;
      dbms_output.put_line('Nome: '                     ||
                         RPAD(v_teste.nom_func,20,' ')  ||
                         'Funcionário: '                ||
                         RPAD(v_teste.vl_salario,10,' ')
                         );
  END LOOP;
  CLOSE FUNC;
end;

-------------- CURSOR com ciclo FOR ----------------------------
begin
dbms_output.put_line('/*===== FOR LOOP =====*/');
  FOR T IN FUNC
    LOOP
      dbms_output.put_line('Nome: '                ||
                           RPAD(T.NOM_FUNC,20,' ') ||
                           'Funcionário: '         ||
                           RPAD(T.VL_SALARIO,10,' ')
                           );
    END LOOP;

end;
--------------- CURSOR com passagem de PARAMETRO --------------------

-- Created on 20/09/2020 by ORACLE 
declare 
  -- Local variables here
  CURSOR FUNC_P(P_COD_DEPTO NUMBER) IS
   SELECT F.NOM_FUNC
   FROM   PRO_FUNC F
   WHERE  F.COD_DPTO = P_COD_DEPTO;
   
begin
  -- Test statements here
  FOR F IN FUNC_P(4)
    LOOP
      dbms_output.put_line(F.NOM_FUNC);
    END LOOP;
end;

--------------- CURSOR (não Declarado) --------------------------

-- Created on 20/09/2020 by ORACLE 
declare 
  -- Local variables here
  v_bonus  NUMBER;
begin
  -- Test statements here
  FOR F IN 
    (
     SELECT nom_func,
            vl_salario
     FROM   PRO_FUNC F 
    )
    LOOP
      v_bonus := (F.VL_SALARIO * 0.09);
      dbms_output.put_line(
                           'Funcionário: '           || 
                           RPAD(F.NOM_FUNC,20,' ')   ||
                           'Valor Ant = '            ||
                           RPAD(F.VL_SALARIO,10,' ') ||
                           'Valor Novo = '           ||
                           v_bonus
                           );
    END LOOP;
end;

------------- Deletar com CURSOR Campos iguais e permanece 1 ----------------





