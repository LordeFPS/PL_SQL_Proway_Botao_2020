---------------------- FUNÇÃO SUBSTR ---------------------------
select substr(f.nom_func,1,5) -- primeiro numero escolhe onde qr começar e o segundo numero fala quantos char tera na busca

from pro_func f

where substr(f.nom_func,1,1) = 'M'
---------------------- FUNÇÃO CONCATENAR ---------------------------------------
select substr(f.nom_func,1,5) "Nome Filtrado",
       f.cod_func ||' - '|| f.nom_func "Nome Concatenado" -- uso de concatenar || 

from pro_func f
---------------------- FUNÇÃO LENGTH -------------------------
select f.nom_func Nome,
       length(f.nom_func) "Quantidade de Cacter" -- conta quantos caracteres tem aqele campo

from pro_func f
---------------------- FUNÇÃO INSTR ------------------------------
faz uma busca
select f.nom_func Nome,
       instr(f.nom_func,'M') "Posição da letra" -- procura o nome da letra desejada e mostra em qual posição ela está

from pro_func f
//////////////////////////////////////
usando a função UPPER colocando tudo maiusculo para fazer uma busca em todos
select initcap(f.nom_func) Nome,
       instr(upper(f.nom_func),'R') "Posição da letra" -- procura o nome da letra desejada e mostra em qual posição ela está

from pro_func f
---------------------- FUNÇÃO LPAD E RPAD ---------------------------
preencher campos pra direira ou esquerda, delimitador, deixar todos com a mesma quantidade de caracteres
select --f.nom_func Nome,
       length(f.nom_func) "LENGTH",
       LPAD(f.nom_func,16,'*') "16 char L",
       RPAD(f.nom_func,16,'*') "16 char R" -- deixa todos com a mesma quantidade de caracter
       
from pro_func f
---------------------- FUNÇÃO LTRIM E RTRIM -----------------------------
tirar os espaços do cemoço e final do campo
select --f.nom_func Nome,
       length(f.nom_func) "LENGTH",
       LTRIM(LPAD(f.nom_func,16,' ')) "16 char L",
       RTRIM(RPAD(f.nom_func,16,' ')) "16 char R", -- deixa todos com a mesma quantidade de caracter
       TRIM(RPAD(f.nom_func,16,' ')) "16 char R"

from pro_func f
---------------------- FUNÇÃO DECODE --------------------------------
select f.nom_func Nome,
       nvl(f.vl_salario,0) Salário,
  decode(f.vl_salario,null,0       -- if(null), else(0)
                     ,1600, 2000   -- if(1600), else(2000)
                          ,f.vl_salario) Decode
from pro_func f
---------------------- FUNÇÃO CASE ------------------------------------
select f.nom_func Nome,
       nvl(f.vl_salario,0) Salário,
       case  
         when f.vl_salario is null -- condição se o salario for null
           then 0                  -- ele retorna 0
         when f.vl_salario = 1600  -- 2ª condição
           then 3000  
         else                      -- caso contrario ele retorna o salario
           f.vl_salario         
       end Case

from pro_func f
-------------------- Exercícios --------------------------
-- Exercicio 4 do slide "1"
select substr(lower(c.nmcidade),1,5) Cidades
       
from pro_cidade c

where length(c.nmcidade) < 6 -- length procura quantos caracteres tem
///////////////////////////////////
-- Exercicio  3 selide "2"
select f.cod_func Código,
       f.nom_func Nome,
       TO_CHAR(SYSDATE,'YYYY') - TO_CHAR(f.dat_admissao,'YYYY') Admissao,
       case
         when f.vl_salario is null
           then 0
         else f.vl_salario
       end Salário,
       case
         when d.nm_dpto is null
           then 'Sem departamento'
         else d.nm_dpto
       end Departamento
       
from pro_func f

join pro_depto d on f.cod_dpto = d.cod_dpto (+)

--where f.vl_salario > 2500
--and   d.cod_dpto in (1,4,6)
--and   TO_CHAR(SYSDATE,'YYYY') - TO_CHAR(f.dat_admissao,'YYYY') > 9
////////////////////////////////////////
-- Exercicio 6 slide "3"
select 
       case
         when d.nm_dpto is null
           then 'Sem departamento'
         else d.nm_dpto
       end Departamento,
       sum(nvl(f.vl_salario,0)) "Gastos"

from pro_func f

join pro_depto d on f.cod_dpto = d.cod_dpto (+)
 
group by d.nm_dpto

--HAVING sum(nvl(f.vl_salario,0)) < 6000 -- so usa quando tiver uma clausula de group by
--and    sum(nvl(f.vl_salario,0)) > 3000

HAVING sum(nvl(f.vl_salario,0)) between 3000 and 6000
-------------------- FUNÇÃO DISTINCT -----------------------------
select DISTINCT case
         when d.nm_dpto is null
           then 'Sem departamento'
         else d.nm_dpto
       end Departamento
       --sum(nvl(f.vl_salario,0)) "Gastos"

from pro_func f

join pro_depto d on f.cod_dpto = d.cod_dpto (+)
------------------- FUNÇÃO REPLACE --------------------------
select f.nom_func,
       REPLACE (f.nom_func,'SCHIMIT','SCHIMITT') "Replace"


from pro_func f
------------------- FUNÇÃO TRANSLATE ----------------------
select f.nom_func Nome,
       TRANSLATE (f.nom_func,'Ãr','AR')

from pro_func f
------------------- Clausula UNION -------------------------
JUNTA OQ É IGUAL E MOSTRA UMA VEZ
select f.nom_func,
       f.vl_salario

from pro_func f

UNION

select f.nom_func,
       f.vl_salario

from pro_func f

where f.cod_dpto = 2
------------------- Clausula INTERSECT -------------------------
MOSTRA APENAS OQ É IGUAL ENTRA OS SELCT'S'
select f.nom_func,
       f.vl_salario

from pro_func f

INTERSECT

select f.nom_func,
       f.vl_salario

from pro_func f

where f.cod_dpto = 2
------------------- 